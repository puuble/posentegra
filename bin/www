#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var debug = require('debug')('express:server')
var http = require('http')
const TY = require('./lib/ty')
const fs = require('fs')
const cron = require('node-cron')
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '7373')
app.set('port', port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

function getEnvironment() {
  try {
    let data = null
    if (fs.existsSync('./tmp/enviroment.json')) {
      data = fs.readFileSync('./tmp/enviroment.json', 'utf8')
      data = JSON.parse(data)
    }
    return data
  } catch (err) {
    console.error(err)
  }
}
const ORTAM = 'prod'
const env = getEnvironment()

async function run() {
  if (env) {
    let restaurants = _.has(env, 'restaurants') ? env.restaurants : []
    restaurants = Object.keys(restaurants)
    if (Array.isArray(restaurants)) {
      if (restaurants.length > 0) {
        await asyncForEach(restaurants, async (key) => {
          let option = env.restaurants[key]

          if (_.has(option, 'ty')) {
            if (_.has(option['ty'], 'integration')) {
              if (
                option['ty']['integration']['apiKey'] != '' &&
                option['ty']['integration']['apiSecretKey'] != '' &&
                option['ty']['integration']['supplierId'] != ''
              ) {
                const ty = new TY(option['ty'])
                await ty.getOrder(true)
              }
            }
          }
        })
      }
    }
  }
}
/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
  console.log('test')
  try {
    if (env) {
      let restaurants = _.has(env, 'restaurants') ? env.restaurants : []
      restaurants = Object.keys(restaurants)
      if (Array.isArray(restaurants)) {
        if (restaurants.length > 0) {
          cron.schedule('*/7 * * * * *', async () => {
            console.log('7 saniye de bir run ')
            await run()
          })
        }
      }
    } else {
      console.log('Token girilmesi gerekiyor. ')
      console.log(`http://localhost:3000  sayfasını tarayıcıdan açınız.`)
    }
  } catch (error) {
    console.log(error)
  }
}
