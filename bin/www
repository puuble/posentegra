#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var debug = require('debug')('posentegraclient:server')
const cron = require('node-cron')
var http = require('http')
const { signin } = require('./start')
const { asyncForEach, getEnvironment } = require('./lib/helpers')
const _ = require('lodash')
const TY = require('./lib/ty')
const YS = require('./lib/ys')
const ORTAM = process.env.ORTAM
const env = getEnvironment()
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
async function run() {
  if (env) {
    let restaurants = _.has(env, 'restaurants') ? env.restaurants : []
    restaurants = Object.keys(restaurants)
    if (Array.isArray(restaurants)) {
      if (restaurants.length > 0) {
        await asyncForEach(restaurants, async (key) => {
          let option = env.restaurants[key]

          if (_.has(option, 'ty')) {
            const ty = new TY(option['ty'])
            console.log('tyGetOrder')
            await ty.getOrder(true)
          }
          if (_.has(option, 'ys')) {
            console.log('ysGetOrder')
            const ys = new YS(option['ys'], 2)
            await ys.getOrder()
          }
        })
      }
    }
  }
}
function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
  try {
    if (env) {
      if (ORTAM != 'dev') {
        if (env) {
          signin()
          let restaurants = _.has(env, 'restaurants') ? env.restaurants : []
          restaurants = Object.keys(restaurants)
          if (Array.isArray(restaurants)) {
            if (restaurants.length > 0) {
              cron.schedule('*/10 * * * * *', async () => {
                console.log(
                  '10 saniye de bir run ikinci guncelleme geldi enviromenti silmeden '
                )
                await run()
              })
            }
          }
        }
      }
    } else {
      console.log('Token girilmesi gerekiyor. ')
      console.log(`http://localhost:3000  sayfasını tarayıcıdan açınız.`)
    }
  } catch (error) {
    console.log(error)
  }
}
